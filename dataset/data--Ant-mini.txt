"/** XXX I really don't like this - the XML processor is still             * too 'involved' in the processing. A better solution (IMO)             * would be to create UE for Project and Target too, and             * then process the tree and have Project/Target deal with             * its attributes ( similar with Description ).             *             * If we eventually switch to ( or add support for ) DOM,             * things will work smoothly - UE can be avoided almost completely             * ( it could still be created on demand, for backward compatibility )             */"
// JUnit 4 wraps solo tests this way. We can extract // the original test name with a little hack.
// XXX ignore attributes in a different NS ( maybe store them ? )
//borrowed from TokenFilterTest
// XXX Move to Project ( so it is shared by all helpers )
// What is the property supposed to be?
// PR: Hack for ant-type value //  an ant-type is a component name which can // be namespaced, need to extract the name // and convert from qualified name to uri/name
// there's a convenient xsltc class version but data are // private so use package information
// stolen from org.apache.xerces.impl.XMLEntityManager#getUserDir() // of the Xerces-J team // which ASCII characters need to be escaped
// bingo append it. (this should normally not be done here)
// This is faintly ridiculous:
//cannot remove underscores due to protected visibility >:(
// TODO not read, yet in a public setter
//  PR: I do not know what to do if the object class //      has multiple defines //      but this is for logging only...
// not sure what could be the need of this...
// XXX: (Jon Skeet) Any reason for writing a message and then using a bare // RuntimeException rather than just using a BuildException here? Is it // in case the message could end up being written to no loggers (as the // loggers could have failed to be created due to this failure)?
// Experimental/Testing, will be removed
// XXX should instead make a new ProtectionDomain with a CodeSource // corresponding to container.toURI().toURL() and the same // PermissionCollection as Project.class.protectionDomain had
//this is really irritating; we need a way to set stuff
//XXX // All this to convert source to destination directory according // to weblogic standards Can be written better... this is too hacky!
//silly hack to avoid stack overflow...
// -------------------- Access to property tables  -------------------- // This is used to support ant call and similar tasks. It should be // deprecated, it is possible to use a better (more efficient) // mechanism to preserve the context.
// XXX - should throw an exception instead?
// Temporary - until we figure a better API
// There is a better way to save the context. This shouldn't // delegate to next, it's for backward compatibility only.
// quick fix for Ant.java use of property before // initializing the project
// XXX: we should use JCVS (www.ice.com/JCVS) instead of // command line execution so that we don't rely on having // native CVS stuff around (SM)
"/*             * two reasons are mentioned in the API docs for File.list             * (1) dir is not a directory. This is impossible as             *     we wouldn't get here in this case.             * (2) an IO error occurred (why doesn't it throw an exception             *     then???)             */"
"/** * Jakarta Commons Logging listener. * Note: do not use the SimpleLog as your logger implementation as it * causes an infinite loop since it writes to System.err, which Ant traps * and reroutes to the logger/listener layer. * * The following names are used for the log: *  org.apache.tools.ant.Project.PROJECT_NAME  - for project events *  org.apache.tools.ant.Target.TARGET_NAME - for target events *  TASK_CLASS_NAME.TARGET_NAME - for events in individual targets. * * In all target and project names we replace ""."" and "" "" with ""-"". * * TODO: we should use the advanced context logging features (and expose them * in c-l first :-) * TODO: this is _very_ inefficient. Switching the out and tracking the logs * can be optimized a lot - but may require few more changes to the core. * * @since Ant 1.5 */"
//     * @TODO using taskName here is brittle, as a user could override it. //     *       this should probably be modified to use the classname instead.
//these are pathological cases, but retained in case somebody //subclassed us.
"/*                 * This is a rather hairy case.                 *                 * One of our subclasses knows that we need to update the                 * archive, but at the same time, there are no resources                 * known to us that would need to be added.  Only the                 * subclass seems to know what's going on.                 *                 * This happens if <jar> detects that the manifest has changed,                 * for example.  The manifest is not part of any resources                 * because of our support for inline <manifest>s.                 *                 * If we invoke createEmptyZip like Ant 1.5.2 did,                 * we'll loose all stuff that has been in the original                 * archive (bugzilla report 17780).                 */"
// This is deprecated - use classespath in the future
//XXX  this array stuff is a remnant of prev trials.. gotta remove.
"/**     * Set the number of milliseconds leeway to give before deciding a     * target is out of date.     * TODO: This is not yet used.     * @param granularity the granularity used to decide if a target is out of     *                    date.     */"
// This may change, if we add advanced parsing capabilities.
// We assume, that every output, jikes does, stands for an error/warning // XXX // Is this correct?
// The line below is a hack: the system id must an URI, but it is not // cleat to get the URI of an resource, so just set the name of the // resource as a system id
// XXX what is the following doing? //     should it run if !javadoc4 && executable != null?
// MAC OS 9 and previous //TODO: I have no idea how to get it, someone must fix it
//TODO: nothing appears to read this but is set using a public setter.
// XXX - we are committing CombiningChar and Extender here
"/*                 * XXX - failed to load the class properly.                 *                 * should we print a warning here?                 */"
// XXX could perhaps also call thread.stop(); not sure if anyone cares
"/**         * XXX         * Perhaps we shouldn't use properties for these         * three options (emacs mode, warnings and pedantic),         * but include it in the javac directive?         */"
// XXX maybe use reflection to addPathElement (other patterns ?)
// TODO there is a problem with the constructor for the RBC. // you have to provide the rules in the constructors - no setters // available.
// probably not the best choice, but it solves the problem of // relative paths in CLASSPATH
// Fix for invalid characters. If you think of more add to the list.
"/*             * fallback in case we have trouble loading the class or             * don't know how to handle it (there is no easy way to             * know what IDL mode would generate.             *             * This is supposed to make Ant always recompile the             * class, as a file of that name should not exist.             */"
// Check it out; also ugly.
//I can't get my head around this; is encoding treatment needed here?
//quick & dirty, to make nested mapped p-sets work:
// XXX is this code still necessary? is there any 1.2+ port? // Pull in *.zip from packages directory
// only: the developer knows what (s)he is doing
// XXX Unfortunately JDK1.2 adds entrySet(), keySet(), values() - // implementing this requires a small hack, we can add it later.
// first: developer could use a little help
// XXX     should we silently catch possible exceptions and try to //         load a different implementation?
// since Java 1.4 //return normalizedPath.split("/"); // workaround for Java 1.2-1.3
// HAMMER // end inline mainGTU
"/**     * This array really shouldn't be here.     * Again, for historical purposes it is.     *     * <p>FIXME: This array should be in a private or package private     * location, since it could be modified by malicious code.</p>     */"
// Should move to a separate public class - and have API to add // listeners, etc.
// "" should become a single empty argument, same for '' // PR 5906
// not very nice but will do the job
// provide public visibility
// not used, but public so theoretically must remain for BC?
// super.validateAttributes(); // don't want to call this method
// XXX what is this for?
// We keep this, so we have something to delete in later tests :-)
// *************  copied from ConcatTest  *************
// not sure whether this is clean, but this method is // declared not to throw exceptions.
// We just set the prefix for this fileset, and pass it up. // Do we need to do this? LH
//why do we do nothing?
// // We have to deal with assembly!!! // The programmer can be writing little 32 byte chunks for all // we know, and we must assemble complete records for writing. // REVIEW Maybe this should be in TarBuffer? Could that help to // eliminate some of the buffer copying. //
// This is the new, better way - use classespath instead // of sourcespath.  The code is currently the same - you // need class files in a directory to use this or jar files.
// XXX - why not simply new File(dir, filename)?
// This is ugly; checking for the root folder.
//TODO: Parameterise ?? //Call compiler as class... dont want to fork again //Use classic compiler -- can be parameterised?
//XXX // All this to get package according to weblogic standards // Can be written better... this is too hacky! // Careful.. similar code in scanDir , but slightly different!!
//stolen from writeManifest
"/* If the jarfile already exists then whack it and recreate it.             * Should probably think of a more elegant way to handle this             * so that in case of errors we don't leave people worse off             * than when we started =)             */"
// XXX is the following really necessary? it is in the same thread group...
// we have to find a cleaner way to put this output
// This is the old way and is deprecated - classespath is // the right way to do this and is above
// For Script example that modifies id'ed tasks in other // targets to work. *very* Ugly // The reference is replaced by RuntimeConfigurable
// don't call super.close() because that reader is used // on other places ...
// report error if something weird happens...this is diagnostic.
// sorry - otherwise we will get a ClassCastException because the MockCache // is loaded by two different classloader ...
// ***HACK*** We ask the VM to create an instance // by voluntarily providing illegal arguments to force // the VM to run the class' static initializer, while // at the same time not running a valid constructor.
// Singleton for now, it may change ( per/classloader )
// XXX - shouldn't this always return false in isolated mode?
//TO DO : delete the file if it is not a valid file.
"/** * TODO: * comment field doesn't include all options yet */"
"/**     * This method checks the timestamp on each file listed in the <code>     * ejbFiles</code> and compares them to the timestamp on the <code>jarFile     * </code>.  If the <code>jarFile</code>'s timestamp is more recent than     * each EJB file, <code>true</code> is returned.  Otherwise, <code>false     * </code> is returned.     * TODO: find a way to check the manifest-file, that is found by naming convention     *     * @param ejbFiles Hashtable of EJB classes (and other) files that will be     *                 added to the completed JAR file     * @param jarFile  JAR file which will contain all of the EJB classes (and     *                 other) files     * @return         boolean indicating whether or not the <code>jarFile</code>     *                 is up to date     */"
// Have to think about lazy initialization here...  JHM // comparator = new java.text.RuleBasedCollator();
//TODO no methods yet for getClassname //TODO no method for newInstance using a reverse-classloader
"/*     * The displayName variable stores the value of the ""display-name"" element     * from the standard EJB descriptor.  As a future enhancement to this task,     * we may determine the name of the EJB JAR file using this display-name,     * but this has not be implemented yet.     */"
"/** * An output stream that compresses into the BZip2 format (without the file * header chars) into another stream. * <p>The compression requires large amounts of memory. Thus you * should call the {@link #close() close()} method as soon as * possible, to force <tt>CBZip2OutputStream</tt> to release the * allocated memory.</p> * * <p>You can shrink the amount of allocated memory and maybe raise * the compression speed by choosing a lower blocksize, which in turn * may cause a lower compression ratio.  You can avoid unnecessary * memory allocation by avoiding using a blocksize which is bigger * than the size of the input. </p> * * <p>You can compute the memory usage for compressing by the * following formula:</p> * <pre> * <code>400k + (9 * blocksize)</code>. * </pre> *  * <p>To get the memory required for decompression by {@link * CBZip2InputStream CBZip2InputStream} use</p> * <pre> * <code>65k + (5 * blocksize)</code>. * </pre> * * <table width=""100%"" border=""1""> *  <colgroup> *    <col width=""33%"" /> *    <col width=""33%"" /> *    <col width=""33%"" /> *  </colgroup> *  <tr> *    <th colspan=""3"">Memory usage by blocksize</th> *  </tr><tr> *    <th align=""right"">Blocksize</th> *    <th align=""right"">Compression<br>memory usage</th> *    <th align=""right"">Decompression<br>memory usage</th> *  </tr><tr> *    <td align=""right"">100k</td> *    <td align=""right"">1300k</td> *    <td align=""right""> 565k</td> *  </tr><tr> *    <td align=""right"">200k</td> *    <td align=""right"">2200k</td> *    <td align=""right"">1065k</td> *  </tr><tr> *    <td align=""right"">300k</td> *    <td align=""right"">3100k</td> *    <td align=""right"">1565k</td> *  </tr><tr> *    <td align=""right"">400k</td> *    <td align=""right"">4000k</td> *    <td align=""right"">2065k</td> *  </tr><tr> *    <td align=""right"">500k</td> *    <td align=""right"">4900k</td> *    <td align=""right"">2565k</td> *  </tr><tr> *    <td align=""right"">600k</td> *    <td align=""right"">5800k</td> *    <td align=""right"">3065k</td> *  </tr><tr> *    <td align=""right"">700k</td> *    <td align=""right"">6700k</td> *    <td align=""right"">3565k</td> *  </tr><tr> *    <td align=""right"">800k</td> *    <td align=""right"">7600k</td> *    <td align=""right"">4065k</td> *  </tr><tr> *    <td align=""right"">900k</td> *    <td align=""right"">8500k</td> *    <td align=""right"">4565k</td> *  </tr> * </table> * * <p>For decompression <tt>CBZip2InputStream</tt> allocates less * memory if the bzipped input is smaller than one block.</p> * * <p>Instances of this class are not threadsafe.</p> * * <p> * TODO:    Update to BZip2 1.0.1 * </p> * */"
// XXX - log an error?  throw an exception?
// TODO: allow user to request the system or no parent
//if there was any text before this, add it as a fragment //TODO, this check could be modified to go if pos>prev; //seems like this current version could stick empty strings //into the list
// XXX add exceptions
// test a process that runs and failed
// ignore
// process should abort
// user:password@host:/path notation
"/*          * @param event the build event that is being logged.         */"
// only track progress for files larger than 100kb in verbose mode
// Element doesn't handle text content
// send "C0644 filesize filename", where filename should not include '/'
// ClearCase items
/* Assign actual codes for the tables. */
// -reserved
/* size of the central directory   */
// gcj doesn't support an extension dir (-extdir) // so we'll emulate it for compatibility and convenience.
// At this point we are probably in failure mode, but // try to use the bare URI as a last gasp
// -unreserved
// DataType can have a "no arg" constructor or take a single // Project argument.
// -out
// b may be 0 for success, //          1 for error, //          2 for fatal error,
// Not whitespace - fail
// Fall tru
// -ndata
// C0644 filesize filename - header for a regular file // T time 0 time 0\n - present if perserve time. // D directory - this is the header for a directory.
// -version
//wince isn't really 9x, but crippled enough to //be a muchness. Ant doesnt run on CE, anyway.
// -nwarn
// if a label has been supplied and it is a revision label, use the raw // the view as the snapshot
// Class doesn't have a String constructor but a decent factory method
/* total number of entries in      */
// Check for \r, \r\n and \r\r\n // Regard \r\r not followed by \n as two lines
// // Success!  The xml-commons resolver library is // available, so use it. //
// it is a new file // set the revision but not the prevrevision
//catch script/ant mismatch with a meaningful message //we could ignore it, but there are likely to be other //version problems, so we stamp down on the configuration now
// don't know the type, should throw exception instead?
// char and Character get special treatment - take the first character
// do nothing
// scan base dirs to build up compile lists only if a // specific classname is not given
// write a Properties file in each directory:
// **   simple name specified   == parent dir + name
// requires version 2 as we are going to store length info // in the data descriptor
// the test runner that wrap the dummy formatter that interests us
// CheckStyle:VisibilityModifier OFF - bc
// First try with Project.
// // The ResourceLocation may specify a relative path for its // location attribute.  This is resolved using the appropriate // base. //
// Can return null to represent the bootstrap class loader. // see API docs of Class.getClassLoader.
/* start of the central directory  */
//private static final int GET_ENTRY = 0;
// file comment
//There were no revisions in this changelog //entry so lets move onto next file
//same date if dest timestamp is within granularity of the srcfile
// must be "add"
// ---------------------------------------------------------- // somewhat arbitrary choices that are quite common for shared // installations // -----------------------------------------------------------
// EnumeratedAttributes have their own helper class
// selectors are implicitly ANDed in DirectoryScanner.  To // revert their logic we wrap them into a <none> selector // instead.
// first off, make sure that we've got a srcdir and destdir
// ZIPs store time with a granularity of 2 seconds, round up
// viewpath
// ------------------------------------------------------ //   Helper methods - should be in BuildFileTest // -----------------------------------------------------
// build the command line from what we got the format is // cleartool lsco [options...] [viewpath ...] // as specified in the CLEARTOOL.EXE help
// Check if list of files to check has been specified
// testNoCrash is the test invoked by the captureToSummary's junit task
// if the two substrings are longer than the original, then name // contains address - so reset the name to null
//default
// log options used
// dummy formatter just to catch the error
// we don't expect to find this
// resolve relative paths through Project
//patch file into the fileset
// type value
// bit3 set to signal, we use a data descriptor
//underscores go in front of invalid start chars
// use to scan own archive
"/** * Tests the {@link XSLTProcess} task. * XXX merge with {@link StyleTest}? * @since Ant 1.5 */"
// it is a modified file // set the revision and the prevrevision
"/*             * throw in drive letters             */"
//set our parent dir
"/*             * promised to eliminate consecutive slashes after drive letter.             */"
// -cfile
// avoid multiple configurations
/** Version to use for addXXX and addConfiguredXXX */
// Compare the destination with the temp file
// SMTP auth only allowed with MIME mail
// All three specified and all three exist -> true
// an address to send from is required
// File is not found in specified filepath
// set the character set if not done already (and required)
// 2 is != 0 and even, so it is considered // failure on any platform currently supported // by Execute#isFailure.
// Eof has been reached
//decide whether to copy the existing arg set, or //build a new one from the list of all args excluding the special //operations that only we handle
// type
// wait for TIME_OUT/2, there should be about TIME_OUT/2 ms remaining before timeout
"/*                fragments.addElement(value.substring(pos + 1, pos + 2));                prev = pos + 2;                */"
// Well, no matching constructor.
//check that dir and src are incompatible
// OK, try without.
// Set up a VSSHistory task
// -ptime
// Throws EjbcException if unsuccessful
// tests one the file object